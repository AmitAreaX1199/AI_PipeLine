import base64
from google.cloud.speech import RecognitionAudio,RecognitionConfig
import boto3
from google.cloud import storage,speech
from google.cloud import speech,texttospeech
import os
from google import genai
import PIL.Image
from dotenv import load_dotenv
load_dotenv()
genai_client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

s3 = boto3.client(
    's3',
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    region_name=os.getenv("AWS_S3_REGION_NAME")
)


def is_valid_base64(self, data):
    try:
        base64.b64decode(data)
        return True
    except Exception:
        return False


def transcribe_audio(self, base64_audio):
    audio_bytes = base64.b64decode(base64_audio)
    client = speech.SpeechClient()

    audio = RecognitionAudio(content=audio_bytes)
    config = RecognitionConfig(
        encoding=RecognitionConfig.AudioEncoding.MP3,
        sample_rate_hertz=16000,
        language_code="en-US"
    )

    response = client.recognize(config=config, audio=audio)

    transcript = ""
    for result in response.results:
        transcript += result.alternatives[0].transcript + " "

    return transcript.strip()


def synthesize_speech_to_base64(self, text):
    client = texttospeech.TextToSpeechClient()

    synthesis_input = texttospeech.SynthesisInput(text=text)
    voice = texttospeech.VoiceSelectionParams(
        language_code="en-US",
        ssml_gender=texttospeech.SsmlVoiceGender.NEUTRAL,
    )
    audio_config = texttospeech.AudioConfig(
        audio_encoding=texttospeech.AudioEncoding.MP3
    )

    response = client.synthesize_speech(
        input=synthesis_input, voice=voice, audio_config=audio_config
    )

    audio_base64 = base64.b64encode(response.audio_content).decode("utf-8")
    return audio_base64


def generate_text(self, prompt):
    # Assume `client` is properly initialized and set up
    response = genai_client.models.generate_content(
        model='gemini-2.0-flash-001',
        contents=[prompt]
    )
    return response.text.strip()


def generate_image(self, prompt):
    response = genai_client.models.generate_images(
        model='imagen-3.0-generate-002',
        prompt=prompt,
        config=types.GenerateImagesConfig(
            number_of_images=1,
            include_rai_reason=True,
            output_mime_type='image/jpeg',
        ),
    )

    if not response.generated_images:
        raise Exception("No image was generated by Gemini.")
    # Extract the image bytes
    image_base64 = response.generated_images[0].image.image_bytes
    image_bytes = base64.b64decode(image_base64)
    image = Image.open(BytesIO(image_bytes))
    # Convert image to file like oobject
    image_io = BytesIO()
    image.save(image_io, format="JPEG")
    image_io.seek(0)

    filename = f"generated_images/{uuid.uuid4()}.jpg"

    bucket = os.getenv("AWS_STORAGE_BUCKET_NAME")
    region = os.getenv("AWS_S3_REGION_NAME")

    s3.upload_fileobj(
        image_io,
        bucket,
        filename,
        ExtraArgs={'ContentType': 'image/jpeg'}
    )

    image_url = f"https://{bucket}.s3-{region}.amazonaws.com/{filename}"

    return image_url